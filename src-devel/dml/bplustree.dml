/* This section pertains to support for persistent collections using B+Trees */

package org.cloudtm.framework.ispn.collections.bplustree;

class BPlusTree {}

class AbstractNode {}

class LeafNode extends AbstractNode {
    // key: any OID
    // value: any reference to a domainObject
    TreeMap<String,org.cloudtm.framework.ispn.AbstractDomainObject> entries;
}

class InnerNode extends AbstractNode {
    // A B-Tree node contains M keys and M+1 children.  We represent the first
    // M children aggregated with a key and add a special LAST_KEY for the
    // M+1-th children.  This way the i-th child always contains elements
    // whose keys are less than the i-th key.
    // key: any OID
    // value: a Node
    TreeMap<String,AbstractNode> subNodes;
}

relation BPlusTreeHasRootNode {
    BPlusTree playsRole;
    AbstractNode playsRole root;
}

relation NodeHasParent {
    AbstractNode playsRole {
	multiplicity *;
    }
    InnerNode playsRole parent;
}

relation LeafNodeHasSibling {
    LeafNode playsRole previous;
    LeafNode playsRole next;
}
